//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"RunGroversSearch\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":17}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"phaseOracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":20}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"iterations\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":19}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bitstring\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Bool\"}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":5,\"Column\":9},\"Item2\":{\"Line\":5,\"Column\":18}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Bool\"}]}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"RunGroversSearch\"},\"Attributes\":[],\"SourceFile\":\"/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"SolveGraphColoringProblem\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Core\",\"Name\":\"EntryPoint\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]}}]},\"Argument\":{\"Item1\":{\"Case\":\"UnitValue\"},\"Item2\":[],\"Item3\":{\"Case\":\"UnitType\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":12},\"Item2\":{\"Line\":1,\"Column\":14}}]}},\"Offset\":{\"Item1\":42,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs\",\"Position\":{\"Item1\":43,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ExploringGroversSearchAlgorithm\",\"Name\":\"SolveGraphColoringProblem\"},\"Attributes\":[],\"SourceFile\":\"/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs\",\"Position\":{\"Item1\":43,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"Documentation\":[]}")]
#line hidden
namespace ExploringGroversSearchAlgorithm
{
    [SourceLocation("/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs", OperationFunctor.Body, 14, 44)]
    public partial class RunGroversSearch : Operation<(IQArray<Qubit>,IAdjointable,Int64,IQArray<IQArray<Boolean>>), QVoid>, ICallable
    {
        public RunGroversSearch(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IAdjointable,Int64,IQArray<IQArray<Boolean>>)>, IApplyData
        {
            public In((IQArray<Qubit>,IAdjointable,Int64,IQArray<IQArray<Boolean>>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "RunGroversSearch";
        String ICallable.FullName => "ExploringGroversSearchAlgorithm.RunGroversSearch";
        protected ICallable<(IQArray<Qubit>,IQArray<IQArray<Boolean>>), QVoid> SudokuSolutionsSuperposition__BitstringSuperposition
        {
            get;
            set;
        }

        protected IAdjointable Microsoft__Quantum__Canon__ApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Most
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Tail
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IAdjointable,Int64,IQArray<IQArray<Boolean>>), QVoid> __Body__ => (__in__) =>
        {
            var (register,phaseOracle,iterations,bitstring) = __in__;
#line 28 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            SudokuSolutionsSuperposition__BitstringSuperposition.Apply((register, bitstring));
#line 32 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            foreach (var __arg1__ in new QRange(1L, iterations))
#line hidden
            {
#line 33 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                phaseOracle.Apply(register);
#line 35 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__H, register));
#line 36 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__X, register));
#line 38 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                Microsoft__Quantum__Intrinsic__Z.Controlled.Apply((Microsoft__Quantum__Arrays__Most.Apply<IQArray<Qubit>>(register), Microsoft__Quantum__Arrays__Tail.Apply<Qubit>(register)));
#line 14 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, register));
#line 14 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__H, register));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.SudokuSolutionsSuperposition__BitstringSuperposition = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IQArray<IQArray<Boolean>>), QVoid>>(typeof(global::SudokuSolutionsSuperposition.BitstringSuperposition));
            this.Microsoft__Quantum__Canon__ApplyToEachA = this.__Factory__.Get<IAdjointable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
            this.Microsoft__Quantum__Arrays__Most = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Most<>));
            this.Microsoft__Quantum__Arrays__Tail = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Tail<>));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IAdjointable,Int64,IQArray<IQArray<Boolean>>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register, IAdjointable phaseOracle, Int64 iterations, IQArray<IQArray<Boolean>> bitstring)
        {
            return __m__.Run<RunGroversSearch, (IQArray<Qubit>,IAdjointable,Int64,IQArray<IQArray<Boolean>>), QVoid>((register, phaseOracle, iterations, bitstring));
        }
    }

    [SourceLocation("/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs", OperationFunctor.Body, 44, -1)]
    public partial class SolveGraphColoringProblem : Operation<QVoid, QVoid>, ICallable
    {
        public SolveGraphColoringProblem(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "SolveGraphColoringProblem";
        String ICallable.FullName => "ExploringGroversSearchAlgorithm.SolveGraphColoringProblem";
        public static EntryPointInfo<QVoid, QVoid> Info => new EntryPointInfo<QVoid, QVoid>(typeof(SolveGraphColoringProblem));
        protected ICallable<(IQArray<Int64>,IQArray<IQArray<Int64>>,Int64), IQArray<IQArray<Int64>>> SudokuElements__DoPermute
        {
            get;
            set;
        }

        protected ICallable<(IQArray<IQArray<IQArray<Int64>>>,IQArray<IQArray<Int64>>,Int64,IQArray<Int64>,IQArray<Int64>,IQArray<Int64>,IQArray<Int64>), IQArray<IQArray<Int64>>> SudokuElements__DoPermuteArrays
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), IQArray<Boolean>> Microsoft__Quantum__Convert__IntAsBoolArray
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit,Int64)> SudokuOracles__SudokuOracle
        {
            get;
            set;
        }

        protected IAdjointable<(IAdjointable,IQArray<Qubit>)> SudokuOracles__OracleConverter
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IAdjointable,Int64,IQArray<IQArray<Boolean>>), QVoid> RunGroversSearch__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> Microsoft__Quantum__Measurement__MultiM
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Measurement__MResetZ
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, IQArray<Boolean>> Microsoft__Quantum__Convert__ResultArrayAsBoolArray
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Chunks
        {
            get;
            set;
        }

        protected ICallable<IQArray<Boolean>, Int64> Microsoft__Quantum__Convert__BoolArrayAsInt
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 49 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            var order = 2L;
#line 60 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            var gridSize = 3L;
#line 61 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            var gridPairs = (IQArray<(Int64,Int64)>)new QArray<(Int64,Int64)>((0L, 1L), (0L, 2L), (1L, 2L));
#line 69 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            var SudokuNumbers = QArray<Int64>.Create(0L);
#line 70 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            var bitlength = 0L;
#line 71 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            if ((order == 2L))
            {
#line 72 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                bitlength = 2L;
#line 73 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                SudokuNumbers = new QArray<Int64>(0L, 1L, 2L, 3L);
            }
            else if ((order == 3L))
            {
#line 75 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                bitlength = 4L;
#line 76 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                SudokuNumbers = new QArray<Int64>(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L);
            }
            else if ((order == 4L))
            {
#line 78 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                bitlength = 4L;
#line 79 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                SudokuNumbers = new QArray<Int64>(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L);
            }

#line 85 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            var SudokuRow = (IQArray<IQArray<Int64>>)SudokuElements__DoPermute.Apply((SudokuNumbers?.Copy(), QArray<IQArray<Int64>>.Create(0L), 0L));
#line 106 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            var sudoku = (IQArray<IQArray<IQArray<Int64>>>)new QArray<IQArray<IQArray<Int64>>>(SudokuRow);
#line 110 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            var SudokuSolutions = (IQArray<IQArray<Int64>>)SudokuElements__DoPermuteArrays.Apply((sudoku, QArray<IQArray<Int64>>.Create(0L), 0L, QArray<Int64>.Create(0L), QArray<Int64>.Create(0L), QArray<Int64>.Create(0L), QArray<Int64>.Create(0L)));
#line 111 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            Message__.Apply(String.Format("{0}", SudokuSolutions.Length));
#line 115 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            var SudokuBitstring = QArray<IQArray<Boolean>>.Create(0L);
#line 116 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            foreach (var SudokuSolution in SudokuSolutions)
#line hidden
            {
#line 117 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                var bitstring = QArray<Boolean>.Create(0L);
#line 118 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                foreach (var i in SudokuSolution)
#line hidden
                {
#line 119 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                    bitstring = QArray<Boolean>.Add(bitstring, Microsoft__Quantum__Convert__IntAsBoolArray.Apply((i, bitlength)));
                }

#line 121 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                SudokuBitstring = QArray<IQArray<Boolean>>.Add(SudokuBitstring, new QArray<IQArray<Boolean>>(bitstring?.Copy()));
            }

#line 125 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            var markingOracle = SudokuOracles__SudokuOracle.Partial(new Func<(IQArray<Qubit>,Qubit), (IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit,Int64)>((__arg1__) => (gridPairs, __arg1__.Item1, __arg1__.Item2, bitlength)));
#line 127 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            var phaseOracle = SudokuOracles__OracleConverter.Partial(new Func<IQArray<Qubit>, (IAdjointable,IQArray<Qubit>)>((__arg2__) => (markingOracle, __arg2__)));
#line 130 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            var solution = QArray<Boolean>.Create((gridSize * bitlength));
#line hidden
            {
#line 134 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                var (register,output) = (Allocate__.Apply((gridSize * bitlength)), Allocate__.Apply());
#line hidden
                bool __arg3__ = true;
                try
                {
#line 135 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                    var nIterations = 1L;
#line 136 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                    var isCorrect = false;
#line 140 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                    while (true)
                    {
#line 141 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                        RunGroversSearch__.Apply((register, phaseOracle, nIterations, SudokuBitstring?.Copy()));
#line 143 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                        var res = (IQArray<Result>)Microsoft__Quantum__Measurement__MultiM.Apply(register);
#line 146 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                        markingOracle.Apply((register, output));
#line 147 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                        if ((Microsoft__Quantum__Measurement__MResetZ.Apply(output) == Result.One))
                        {
#line 148 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                            isCorrect = true;
#line 149 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                            solution = new QArray<Boolean>(Microsoft__Quantum__Convert__ResultArrayAsBoolArray.Apply(res));
                        }

#line 151 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                        ResetAll__.Apply(register);
                        if ((isCorrect || (nIterations > 30L)))
                        {
                            break;
                        }
                        else
                        {
#line 155 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                            nIterations = (nIterations + 1L);
                        }
                    }

#line 157 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                    if (!(isCorrect))
                    {
#line 158 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                        throw new ExecutionFailException("No valid Sudoku solution was found");
                    }
                }
#line hidden
                catch
                {
                    __arg3__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg3__)
                    {
#line hidden
                        Release__.Apply(register);
#line hidden
                        Release__.Apply(output);
                    }
                }
            }

#line 163 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            var numberBits = (IQArray<IQArray<Boolean>>)Microsoft__Quantum__Arrays__Chunks.Apply<IQArray<IQArray<Boolean>>>((bitlength, solution?.Copy()));
#line 164 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            Message__.Apply("The resulting Sudoku solution:");
#line 165 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
            foreach (var i in new QRange(0L, (gridSize - 1L)))
#line hidden
            {
#line 166 "/Users/scapape/OneDrive/Projects/qsharp/Sudoku/Sudoku/SudokuProgram.qs"
                Message__.Apply(String.Format(" Index {0} - Number {1}", i, (Microsoft__Quantum__Convert__BoolArrayAsInt.Apply(numberBits[i]) + 1L)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.SudokuElements__DoPermute = this.__Factory__.Get<ICallable<(IQArray<Int64>,IQArray<IQArray<Int64>>,Int64), IQArray<IQArray<Int64>>>>(typeof(global::SudokuElements.DoPermute));
            this.SudokuElements__DoPermuteArrays = this.__Factory__.Get<ICallable<(IQArray<IQArray<IQArray<Int64>>>,IQArray<IQArray<Int64>>,Int64,IQArray<Int64>,IQArray<Int64>,IQArray<Int64>,IQArray<Int64>), IQArray<IQArray<Int64>>>>(typeof(global::SudokuElements.DoPermuteArrays));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Convert__IntAsBoolArray = this.__Factory__.Get<ICallable<(Int64,Int64), IQArray<Boolean>>>(typeof(global::Microsoft.Quantum.Convert.IntAsBoolArray));
            this.SudokuOracles__SudokuOracle = this.__Factory__.Get<IUnitary<(IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit,Int64)>>(typeof(global::SudokuOracles.SudokuOracle));
            this.SudokuOracles__OracleConverter = this.__Factory__.Get<IAdjointable<(IAdjointable,IQArray<Qubit>)>>(typeof(global::SudokuOracles.OracleConverter));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.RunGroversSearch__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IAdjointable,Int64,IQArray<IQArray<Boolean>>), QVoid>>(typeof(RunGroversSearch));
            this.Microsoft__Quantum__Measurement__MultiM = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(global::Microsoft.Quantum.Measurement.MultiM));
            this.Microsoft__Quantum__Measurement__MResetZ = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Measurement.MResetZ));
            this.Microsoft__Quantum__Convert__ResultArrayAsBoolArray = this.__Factory__.Get<ICallable<IQArray<Result>, IQArray<Boolean>>>(typeof(global::Microsoft.Quantum.Convert.ResultArrayAsBoolArray));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
            this.Microsoft__Quantum__Arrays__Chunks = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Chunks<>));
            this.Microsoft__Quantum__Convert__BoolArrayAsInt = this.__Factory__.Get<ICallable<IQArray<Boolean>, Int64>>(typeof(global::Microsoft.Quantum.Convert.BoolArrayAsInt));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<SolveGraphColoringProblem, QVoid, QVoid>(QVoid.Instance);
        }
    }
}